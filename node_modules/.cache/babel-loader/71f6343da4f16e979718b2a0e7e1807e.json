{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aliak\\\\WebstormProjects\\\\lifetypescript\\\\src\\\\components\\\\Life.tsx\";\nimport React, { useEffect, useState } from \"react\"; // import {getRandomMatrix} from \"../util/random\";\n// import {N_COLUMNS, N_ROWS} from \"../config/config\";\n// import TransformNumbers from \"../services/TransformNumbers\";\n\nimport Matrix from \"./Matrix\";\nexport const Life = props => {\n  const [numbers, setNumber] = useState(props.transform.getNumbers()); // const [flag, setFlag] = useState(true)\n  // console.log(\"123\")\n\n  function newNumbers() {\n    // console.log('qwer')\n    setNumber(JSON.parse(JSON.stringify(props.transform.getNumbers()))); // setFlag(!flag)\n  } // let intervalId;\n\n\n  useEffect(() => {\n    console.log(\"zx\");\n    let intervalId = setInterval(newNumbers, props.interval || 100); // устанавливаем интервал вызова метода tick\n\n    return () => {\n      clearInterval(intervalId);\n      console.log(\"45\");\n    }; // передаем функцию clearInterval\n  }, []); // parameter [] не дает вызывать данный метод при изменение состояния\n\n  return /*#__PURE__*/React.createElement(Matrix, {\n    numbers: numbers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/aliak/WebstormProjects/lifetypescript/src/components/Life.tsx"],"names":["React","useEffect","useState","Matrix","Life","props","numbers","setNumber","transform","getNumbers","newNumbers","JSON","parse","stringify","console","log","intervalId","setInterval","interval","clearInterval"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC,C,CACA;AACA;AACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAOA,OAAO,MAAMC,IAAI,GAAIC,KAAD,IAAkB;AAClC,QAAM,CAACC,OAAD,EAAUC,SAAV,IAAuBL,QAAQ,CAACG,KAAK,CAACG,SAAN,CAAgBC,UAAhB,EAAD,CAArC,CADkC,CAElC;AACA;;AAEA,WAASC,UAAT,GAAsB;AACjB;AACDH,IAAAA,SAAS,CAACI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeR,KAAK,CAACG,SAAN,CAAgBC,UAAhB,EAAf,CAAX,CAAD,CAAT,CAFkB,CAGlB;AACH,GATiC,CAWlC;;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACD,QAAIC,UAAU,GAAGC,WAAW,CAACP,UAAD,EAAaL,KAAK,CAACa,QAAN,IAAkB,GAA/B,CAA5B,CAFa,CAEoD;;AAChE,WAAO,MAAM;AAACC,MAAAA,aAAa,CAACH,UAAD,CAAb;AACVF,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACH,KAFD,CAHY,CAKT;AACN,GANQ,EAMN,EANM,CAAT,CAZkC,CAkB3B;;AACP,sBAAO,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAET,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACH,CApBM","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\n// import {getRandomMatrix} from \"../util/random\";\r\n// import {N_COLUMNS, N_ROWS} from \"../config/config\";\r\n// import TransformNumbers from \"../services/TransformNumbers\";\r\nimport Matrix from \"./Matrix\";\r\nimport TransformNumbers from \"../services/TransformNumbers\";\r\ninterface Props\r\n{\r\n    transform:TransformNumbers\r\n    interval?: number\r\n}\r\nexport const Life = (props: Props) => {\r\n    const [numbers, setNumber] = useState(props.transform.getNumbers());\r\n    // const [flag, setFlag] = useState(true)\r\n    // console.log(\"123\")\r\n\r\n    function newNumbers() {\r\n         // console.log('qwer')\r\n        setNumber(JSON.parse(JSON.stringify(props.transform.getNumbers())))\r\n        // setFlag(!flag)\r\n    }\r\n\r\n    // let intervalId;\r\n    useEffect(() => {\r\n        console.log(\"zx\")\r\n       let intervalId = setInterval(newNumbers, props.interval || 100); // устанавливаем интервал вызова метода tick\r\n        return () => {clearInterval(intervalId)\r\n            console.log(\"45\")\r\n        }; // передаем функцию clearInterval\r\n    }, []) // parameter [] не дает вызывать данный метод при изменение состояния\r\n    return <Matrix numbers={numbers}/>\r\n}"]},"metadata":{},"sourceType":"module"}