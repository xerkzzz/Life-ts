{"ast":null,"code":"import { Delta, N_COLUMNS, N_MaxNeighboursForContinueLife, N_MinNeighboursForContinueLife, N_ROWS, N_ValueNeighboursForStartLife } from \"../config/config\";\nexport default class TransformNumbers {\n  constructor(originalNumbers) {\n    this.originalNumbers = originalNumbers;\n    this.resultNumbers = void 0;\n    this.resultNumbers = JSON.parse(JSON.stringify(this.originalNumbers));\n  }\n\n  getNumbers() {\n    for (let i = 0; i < this.originalNumbers.length; i++) {\n      for (let j = 0; j < this.originalNumbers[i].length; j++) {\n        this.resultNumbers[i][j] = this.determineNumberState(i, j);\n      }\n    }\n\n    this.originalNumbers = this.resultNumbers;\n    return this.resultNumbers;\n  }\n\n  determineNumberState(i, j) {\n    const resultNeighbours = this.getNeighbours(i, j);\n\n    if (this.originalNumbers[i][j] === 1) {\n      if (resultNeighbours.alive < N_MinNeighboursForContinueLife || resultNeighbours.alive > N_MaxNeighboursForContinueLife) {\n        return 0;\n      }\n    }\n\n    if (this.originalNumbers[i][j] === 0) {\n      if (resultNeighbours.alive === N_ValueNeighboursForStartLife) {\n        return 1;\n      }\n    }\n\n    return this.originalNumbers[i][j];\n  }\n\n  isValid(index, limit) {\n    return index >= 0 && index < limit;\n  }\n\n  influenceAria() {\n    const aria = [];\n    aria.push(0);\n\n    for (let i = 1; i <= Delta; i++) {\n      aria.push(i);\n      aria.push(-i);\n    }\n\n    return aria;\n  }\n\n  getNeighbours(i, j) {\n    const aria = this.influenceAria();\n    const result = {\n      alive: 0,\n      dead: 0\n    };\n    let iValue, jValue;\n    aria.forEach(iCurrent => {\n      aria.forEach(jCurrent => {\n        iValue = i + iCurrent;\n        jValue = j + jCurrent;\n\n        if (iValue === i && jValue === j) {} else {\n          if (this.isValid(iValue, N_COLUMNS) && this.isValid(jValue, N_ROWS)) {\n            result[this.originalNumbers[iValue][jValue] === 0 ? \"dead\" : \"alive\"]++;\n          }\n        }\n      });\n    });\n    return result;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/aliak/WebstormProjects/lifetypescript/src/services/TransformNumbers.ts"],"names":["Delta","N_COLUMNS","N_MaxNeighboursForContinueLife","N_MinNeighboursForContinueLife","N_ROWS","N_ValueNeighboursForStartLife","TransformNumbers","constructor","originalNumbers","resultNumbers","JSON","parse","stringify","getNumbers","i","length","j","determineNumberState","resultNeighbours","getNeighbours","alive","isValid","index","limit","influenceAria","aria","push","result","dead","iValue","jValue","forEach","iCurrent","jCurrent"],"mappings":"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","sourcesContent":["import {\r\n    Delta,\r\n    N_COLUMNS,\r\n    N_MaxNeighboursForContinueLife,\r\n    N_MinNeighboursForContinueLife,\r\n    N_ROWS, N_ValueNeighboursForStartLife\r\n} from \"../config/config\";\r\n\r\ninterface NeighboursResult\r\n{\r\n    alive: number\r\n    dead: number\r\n}\r\n\r\nexport default class TransformNumbers\r\n{\r\n    private readonly resultNumbers: Array<Array<number>>\r\n\r\n    constructor(private originalNumbers:Array<Array<number>>)\r\n    {\r\n        this.resultNumbers = JSON.parse(JSON.stringify(this.originalNumbers));\r\n    }\r\n\r\n    getNumbers() {\r\n        for (let i = 0; i < this.originalNumbers.length; i++) {\r\n            for (let j = 0; j < this.originalNumbers[i].length; j++) {\r\n                this.resultNumbers[i][j] = this.determineNumberState(i, j);\r\n            }\r\n        }\r\n        this.originalNumbers = this.resultNumbers;\r\n        return this.resultNumbers;\r\n\r\n    }\r\n\r\n    determineNumberState(i: number, j: number) {\r\n        const resultNeighbours = this.getNeighbours(i, j);\r\n        if (this.originalNumbers[i][j] === 1) {\r\n            if (resultNeighbours.alive < N_MinNeighboursForContinueLife || resultNeighbours.alive > N_MaxNeighboursForContinueLife) {\r\n                return 0;\r\n            }\r\n        }\r\n        if (this.originalNumbers[i][j] === 0) {\r\n            if (resultNeighbours.alive === N_ValueNeighboursForStartLife) {\r\n                return 1;\r\n            }\r\n        }\r\n\r\n        return this.originalNumbers[i][j];\r\n    }\r\n\r\n    isValid(index: number, limit:number):boolean\r\n    {\r\n        return index >= 0 && index < limit;\r\n    }\r\n\r\n    influenceAria() : Array<number>\r\n    {\r\n        const aria = [];\r\n        aria.push(0);\r\n        for (let i = 1; i <= Delta; i++) {\r\n            aria.push(i);\r\n            aria.push(-i);\r\n\r\n        }\r\n\r\n        return aria;\r\n    }\r\n\r\n    getNeighbours(i: number, j: number): NeighboursResult\r\n    {\r\n        const aria = this.influenceAria();\r\n        const result = { alive: 0, dead: 0 };\r\n\r\n        let iValue, jValue;\r\n\r\n        aria.forEach(iCurrent => {\r\n            aria.forEach(jCurrent => {\r\n                iValue = i + iCurrent;\r\n                jValue = j + jCurrent;\r\n                if (iValue === i && jValue === j) {\r\n\r\n                } else {\r\n                    if (this.isValid(iValue, N_COLUMNS) && this.isValid(jValue, N_ROWS)) {\r\n                        result[this.originalNumbers[iValue][jValue] === 0 ? \"dead\" : \"alive\"]++;\r\n                    }\r\n                }\r\n            })\r\n        })\r\n\r\n        return result;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}